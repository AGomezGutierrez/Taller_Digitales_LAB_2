`timescale 1ns / 1ps
// Definición del módulo decodificador de hexadecimal
module hex_to_7seg_decoder (
    input [3:0] hex_in, // entrada hexadecimal de 4 bits
    output reg [6:0] seg_out  // salida de 7 segmentos de 7 bits
);

// Asignación de valores a la salida seg_out basado en la entrada hex_in
always @* begin
    case (hex_in)
        4'h0: seg_out = 7'b1000000;
        4'h1: seg_out = 7'b1111001;
        4'h2: seg_out = 7'b0100100;
        4'h3: seg_out = 7'b0110000;
        4'h4: seg_out = 7'b0011001;
        4'h5: seg_out = 7'b0010010;
        4'h6: seg_out = 7'b0000010;
        4'h7: seg_out = 7'b1111000;
        4'h8: seg_out = 7'b0000000;
        4'h9: seg_out = 7'b0011000;
        4'ha: seg_out = 7'b0001000;
        4'hb: seg_out = 7'b0000011;
        4'hc: seg_out = 7'b0100111;
        4'hd: seg_out = 7'b0100001;
        4'he: seg_out = 7'b0000110;
        4'hf: seg_out = 7'b0001110;
        default: seg_out = 7'b1111111;
    endcase
end

endmodule

// Definición del testbench
module tb;

reg [15:0] reg_in; // registro de entrada de 16 bits
reg we; // señal de habilitación de escritura
wire [13:0] seg_out; // salida de 7 segmentos de 14 bi

// Instanciación del módulo hex_to_7seg_decoder y conexión de las señale
hex_to_7seg_decoder dut (
    .hex_in(reg_in[3:0]), // Conexión de los bits 3 a 0 del registro de entrada reg_in a la entrada hex_in del módulo
    .seg_out(seg_out) // Conexión de la salida seg_out del módulo a la señal de salida seg_out
);

// Inicialización del bloque de pruebas
initial begin
    we = 1;        // Inicialización de la señal de habilitación de escritura en 1
    reg_in = 16'h0000;  // Inicialización del registro de entrada en 0
    #10; // Espera de 10 unidades de tiempo antes de continuar
    we = 0; // Desactivación de la señal de habilitación de escritura
    #2000000; // Espera de 2 segundos antes de detener la simulación
    $finish; // Detención de la simulación
end

// Generación de datos aleatorios en el registro de entrada reg_in cada 1 unidad de tiempo si la señal 
//de habilitación de escritura WE está activa
always #1 begin
    if (we) begin
        reg_in = $random;
    end
end

endmodule
