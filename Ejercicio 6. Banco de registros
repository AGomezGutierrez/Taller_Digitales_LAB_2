`timescale 1ns / 1ps
// Establecer la escala de tiempo


// Definir el módulo principal del banco de registros
module Banco_Registros;

  // Definir los parámetros del tamaño del banco de registros
  parameter N = 4;
  parameter W = 8;
  
  // Definir los registros internos y las entradas/salidas
  reg [N-1:0] addr_rd, addr_wr, addr_rs1, addr_rs2;
  reg [W-1:0] data_in;
  reg we;
  wire [W-1:0] rs1, rs2;
  integer i, j, k;
  
  // Instanciar el módulo del banco de registros
  reg_bank #(
    .N(N),
    .W(W)
  ) reg_bank_inst (
    .clk(clk),
    .addr_rd(addr_rd),
    .addr_wr(addr_wr),
    .data_in(data_in),
    .we(we),
    .addr_rs1(addr_rs1),
    .addr_rs2(addr_rs2),
    .rs1(rs1),
    .rs2(rs2)
  );

  // Iniciar la simulación del banco de registros
  initial begin
    $display("Comenzando la prueba del banco de registros...");
    
    // Escribir datos en el banco de registros
    for (i = 0; i < (1<<N); i = i+1) begin
      data_in = $random;
      addr_wr = i;
      we = 1;
      #1;
      we = 0;
    end
    $display("Escritura de registros completada");
    // Leer datos del banco de registros
    for (j = 0; j < 10; j = j+1) begin
      addr_rs1 = $random % (1<<N);
      addr_rs2 = $random % (1<<N);
      #1;
      $display("Valor leido para rs1 (%d): %d", addr_rs1, rs1);
      $display("Valor leido para rs2 (%d): %d", addr_rs2, rs2);
    end
    $display("Lectura de registros completada");

    // Finalizar la simulación
    $finish;
  end

endmodule

// Definir el módulo del banco de registros
module reg_bank (
  input wire clk,
  input wire [N-1:0] addr_rd,
  input wire [N-1:0] addr_wr,
  input wire [W-1:0] data_in,
  input wire we,
  input wire [N-1:0] addr_rs1,
  input wire [N-1:0] addr_rs2,
  output reg [W-1:0] rs1,
  output reg [W-1:0] rs2
);
  // Definir los parámetros del tamaño del banco de registros
  parameter N = 4;
  parameter W = 8;  
  reg [W-1:0] regs [0:(1<<N)-1];


//Este código describe el comportamiento de un banco de registros que utiliza registros de tamaño W y cuenta con N registros.
//La sección de always está sensibilizada al flanco de subida del reloj clk y verifica si la señal we está activa. Si lo está,
//la entrada data_in se escribe en el registro en la dirección addr_wr especificada.
//Se asignan los valores de los registros en las direcciones addr_rs1 y addr_rs2 a las salidas rs1 y rs2, respectivamente.
//Es importante tener en cuenta que este módulo no verifica si las direcciones de los registros están dentro del rango permitido
//(0 a N-1), por lo que se debe tener cuidado al utilizarlo para evitar errores
  always @(posedge clk) begin
    if (we) begin
      regs[addr_wr] <= data_in;
    end
    rs1 <= regs[addr_rs1];
    rs2 <= regs[addr_rs2];
  end

endmodule
