//CONTADOR DEL PROGRAMA

`timescale 1ns / 1ps
//El bloque module program_counter define el módulo program_counter que implementa un contador de programa.
//Este módulo tiene cinco entradas y dos salidas:
module program_counter (
    input clk,
    input rst,
    input [31:0] jump,
    input [1:0] op,
    output reg [31:0] pc,
    output reg [31:0] PCInc
);


//El código always @(posedge clk, posedge rst) begin define un bloque always sensible al flanco de subida del reloj (posedge clk)
//y al flanco de subida de la señal de reset (posedge rst). Dentro de este bloque se especifica un conjunto de instrucciones que
//se ejecutarán cada vez que se produzca alguno de estos eventos.
always @(posedge clk, posedge rst) begin
    if (rst) begin
        pc <= 0;
        PCInc <= 4;
    end else begin
        case (op)
            2'b00: begin // reset
                pc <= 0;
                PCInc <= 4;
            end
            2'b01: begin // hold
                pc <= pc;
                PCInc <= pc + 4;
            end
            2'b10: begin // PC+4
                pc <= pc + 4;
                PCInc <= pc + 4;
            end
            2'b11: begin // jump
                pc <= jump;
                PCInc <= jump + 4;
            end
        endcase
    end
end

endmodule


//La línea module tb_program_counter; es el módulo de prueba que se utilizará para verificar el correcto funcionamiento
//del módulo program_counter.
module tb_program_counter;

reg clk;
reg rst;
reg [31:0] jump;
reg [1:0] op;
wire [31:0] pc;
wire [31:0] PCInc;


//La línea program_counter dut( instancia el módulo program_counter y conecta sus puertos de entrada y salida con señales
//definidas en el módulo tb_program_counter. La instancia se nombra como dut.
program_counter dut(
    .clk(clk),
    .rst(rst),
    .jump(jump),
    .op(op),
    .pc(pc),
    .PCInc(PCInc)
);


//La sección initial begin inicializa las señales de entrada del módulo de prueba, en este caso se inicializa la señal clk en 0
//y luego se establece una secuencia infinita de pulsos de reloj con un período de 5 unidades de tiempo (1ns / 1ps),
//alternando entre 0 y 1 en cada ciclo.
initial begin
    clk = 0;
    forever #5 clk = ~clk;
end


//La sección de código initial begin en este caso se utiliza para inicializar las señales de entrada rst, op y jump.
//Despues, el código espera por un tiempo determinado, cambia los valores de op para probar diferentes operaciones del módulo,
//establece el valor de jump y finalmente finaliza la simulación con $finish.
initial begin
    rst = 1;
    op = 2'b00;
    #10 rst = 0;
    #10 op = 2'b10;
    #10 op = 2'b10;
    #10 op = 2'b11;
    #10 jump = 32'h80000000;
    #10 op = 2'b10;
    #10 op = 2'b00;
    #10 $finish;
end


//La línea always @(posedge clk, posedge rst) indica que el bloque begin-end que la sigue se ejecutará en cada flanco de subida
//del reloj (posedge clk) o del reset (posedge rst). En este caso, el bloque de código contiene una llamada a $display que muestra
//los valores de pc y PCInc.

//La línea always #1 clk = ~clk hace que el valor de clk cambie cada ciclo de reloj (#1) a su valor complementario (~clk),
//es decir, de 0 a 1 y de 1 a 0. Esto genera una señal de reloj que se utiliza para sincronizar los bloques del diseño.

always @(posedge clk, posedge rst) begin

    $display("pc = %h, PCInc = %h", pc, PCInc);
end

always #1 clk = ~clk;

endmodule
