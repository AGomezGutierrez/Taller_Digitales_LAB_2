`timescale 1ns / 1ps
module interfaz_teclado_hex_divisor(
  input wire clk,           // reloj
  input wire reset,         // señal de reset
  input wire [3:0] teclado, // entrada de teclado
  output reg [3:0] salida   // salida de datos
);

  parameter DIVISOR = 100;  // divisor de reloj

  // registro para almacenar el estado anterior del teclado
  reg [3:0] tecla_anterior;
  // variable para almacenar el estado actual del teclado
  wire [3:0] tecla_actual;
  // contador de división de reloj
  reg [6:0] contador = 0;
  
  // sincronización de la entrada del teclado
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      tecla_anterior <= 4'b0000;
    end else begin
      tecla_anterior <= tecla_actual;
    end
  end
  
  // detección de cambios en la entrada del teclado
  assign tecla_actual = teclado & (~tecla_anterior);
  
  // máquina de estados para antirrebote y lectura de tecla
  reg [1:0] estado = 2'b00;
  parameter ESPERA = 2'b00, LECTURA = 2'b01;
  
  always @(posedge clk) begin
    if (reset) begin
      estado <= ESPERA;
      contador <= 0;
    end else begin
      // divisor de reloj
      if (contador == DIVISOR - 1) begin
        contador <= 0;
      end else begin
        contador <= contador + 1;
      end
      
      case (estado)
        ESPERA: begin
          if (tecla_actual != 0) begin
            estado <= LECTURA;
          end
        end
        
        LECTURA: begin
          if (tecla_actual == 0) begin
            salida <= tecla_anterior;
            estado <= ESPERA;
          end
        end
      endcase
    end
  end
  
endmodule
