
module debounce_sync_counter (
  input logic clk,  // Reloj del sistema
  input logic rst,  // Señal de reset
  input logic btn,  // Entrada del botón/interruptor
  input logic en,   // Señal de habilitación de incremento de conteo
  output logic [7:0] count  // Contador de pruebas sincronizado con el reloj
);

  // Registros para almacenar el estado anterior y actual del botón
  logic btn_state;
  logic btn_synced_state;

  // Máquina de estados para detectar los flancos del botón
  enum logic [1:0] {
    IDLE,
    PRE_PRESSED,
    PRESSED,
    PRE_RELEASED,
    RELEASED
  } btn_fsm_state = IDLE;

  always_ff @(posedge clk or posedge rst) begin
    if (rst) begin
      // Restablecer el estado de la máquina de estados y los registros del botón
      btn_fsm_state <= IDLE;
      btn_state <= 0;
      btn_synced_state <= 0;
    end else begin
      // Actualizar el estado del botón
      btn_state <= btn;

      // Máquina de estados para detectar flancos del botón
      case (btn_fsm_state)
        IDLE:
          if (!btn_state) begin
            btn_fsm_state <= PRE_PRESSED;
          end
        PRE_PRESSED:
          if (!btn_state) begin
            btn_fsm_state <= PRESSED;
          end else begin
            btn_fsm_state <= IDLE;
          end
        PRESSED:
          if (btn_state) begin
            btn_fsm_state <= PRE_RELEASED;
          end
        PRE_RELEASED:
          if (btn_state) begin
            btn_fsm_state <= RELEASED;
          end else begin
            btn_fsm_state <= PRESSED;
          end
        RELEASED:
          if (!btn_state) begin
            btn_fsm_state <= PRE_PRESSED;
          end
      endcase

      // Actualizar la salida sincronizada del botón
      case (btn_fsm_state)
        IDLE:
          btn_synced_state <= 0;
        PRESSED, PRE_RELEASED:
          btn_synced_state <= 1;
        default:
          btn_synced_state <= btn_synced_state;
      endcase
    end
  end

  // Contador de pruebas sincronizado con el reloj y habilitado por EN
  always_ff @(posedge clk or posedge rst) begin
    if (rst) begin
      count <= 0;
    end else if (en && btn_synced_state && (btn_synced_state != btn_state)) begin
      count <= count + 1;
    end else begin
      count <= count;
    end
  end

endmodule

module debounce_sync_counter_testbench;

  // Señal de reloj
  logic clk;

  // Señal de reset
  logic rst;

  // Entrada del botón
  logic btn;

  // Señal de habilitación del contador
  logic en;

  // Salida del contador
  logic [7:0] count;

  // Parámetros del generador de pulsos
  parameter PULSE_PERIOD = 10;
  parameter PULSE_WIDTH = 5;

  // Generador de pulsos para simular la entrada del botón
  always #(PULSE_PERIOD / 2) clk = ~clk;

  always #(PULSE_WIDTH / 2) btn = 1;
  always #(PULSE_PERIOD - PULSE_WIDTH / 2) btn = 0;

  // Instancia del bloque sincronizador y anti-rebote
  debounce_sync_counter dut (
    .clk(clk),
    .rst(rst),
    .btn(btn),
    .en(en),
    .count(count)
  );

  // Secuencia de pruebas
  initial begin
    // Restablecer el circuito
    rst <= 1;
    en <= 0;
    #100;
    rst <= 0;

    // Habilitar el contador
    en <= 1;

    // Esperar 10 pulsos y verificar el valor del contador
    #100;
    if (count !== 10) $error("Conteo incorrecto: esperado 10, obtenido %d", count);

    // Deshabilitar el contador
    en <= 0;

    // Esperar 10 pulsos y verificar que el valor del contador no ha cambiado
    #100;
    if (count !== 10) $error("Conteo incorrecto: esperado 10, obtenido %d", count);

    // Habilitar el contador de nuevo y esperar otros 10 pulsos
    en <= 1;
    #100;
    if (count !== 20) $error("Conteo incorrecto: esperado 20, obtenido %d", count);

    // Finalizar la simulación
    #100;
    $finish;
  end

endmodule

module top(
  input clk,
  input rst,
  input btn,
  output [7:0] leds
);

  // Señal de habilitación del contador
  logic en;

  // Salida del contador
  logic [7:0] count;

  // Instancia del bloque sincronizador y anti-rebote
  debounce_sync_counter dut (
    .clk(clk),
    .rst(rst),
    .btn(btn),
    .en(en),
    .count(count)
  );

  // Asignar la salida del contador a los LED de la tarjeta
  assign leds = count;

endmodule

module debounce_sync_counter_tb;

  // Parámetros del testbench
  parameter CLK_PERIOD = 10; // Periodo del reloj en ns
  parameter BTN_PERIOD = 50; // Periodo del botón en ns

  // Entradas del testbench
  logic clk;
  logic rst;
  logic btn;

  // Salidas del testbench
  logic [7:0] leds;

  // Instancia del bloque superior (top)
  top dut (
    .clk(clk),
    .rst(rst),
    .btn(btn),
    .leds(leds)
  );

  // Generador de reloj
  always #(`CLK_PERIOD/2) clk = ~clk;

  // Generador de pulsos para el botón
  always #(`BTN_PERIOD/2) btn = 1'b1;
  always #(`BTN_PERIOD/2) btn = 1'b0;

  // Test de reset
  initial begin
    rst = 1'b1;
    #(`CLK_PERIOD * 10) rst = 1'b0;
  end

  // Test de conteo de pulsos
  initial begin
    #(`CLK_PERIOD * 20)
    for (int i = 0; i < 10; i++) begin
      assert(leds == i) else $error("Error en el test de conteo");
      #(`BTN_PERIOD * 5)
    end
    $display("Test de conteo exitoso");
    $finish;
  end

endmodule
