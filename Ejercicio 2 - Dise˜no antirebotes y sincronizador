
`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 04/08/2023 04:03:46 PM
// Design Name: 
// Module Name: Proyecto_2
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////
//Esta parte del código define el módulo "Proyecto_2" con cinco señales de entrada (clk, reset, btn, sw y EN)
//y tres señales de salida (btn_sync, sw_sync y count). La directiva "reg" en la definición de las salidas indica
//que son registros y no cables. Las entradas se definen como "input" y las salidas se definen como "output".
//El "7:0" después de "reg" indica que la señal count es de 8 bits. En resumen, esta parte del código define las entradas
//y salidas del módulo "Proyecto_2".
module Proyecto_2 (
//Definicion de entradas
  input clk,
  input reset,
  input btn,
  input sw,
  input EN,
  //Definicion de salidas
  output reg btn_sync,
  output reg sw_sync,
  output reg [7:0] count
);
  
 //timescale 1ns/1ps  // la directiva timescale está dentro del bloque de código
  //Estas líneas de código definen tres registros de dos bits cada uno para almacenar los estados previos de las señales de entrada
  //"btn", "sw" y "EN", con un valor inicial de "11" en binario para cada registro.
  reg [1:0] btn_state = 2'b11;
  reg [1:0] sw_state = 2'b11;
  reg [1:0] en_state = 2'b11;
  //La parte del código que comienza con "always @(posedge clk or posedge reset) begin" es un bloque de código
  //que se ejecuta en cada flanco de subida del reloj (clk) o del reset (reset).
  //Si el reset está activo (reset = 1), los registros de estado y las señales de salida se establecen en sus valores iniciales.
  //De lo contrario, se actualizan los valores de los registros de estado con los valores actuales de las señales de entrada.
  //Luego, si la señal "btn_state" o "sw_state" cambia de 2'b01 a 2'b10 o viceversa, se cambia el valor de la señal de salida
  //correspondiente "btn_sync" o "sw_sync" a su valor complementario. Esto permite sincronizar las señales de entrada "btn" y "sw"
  //con la señal de reloj.
  //Finalmente, si la señal "en_state" es igual a 2'b01, entonces la señal de salida "count" se incrementa en uno.
  //Esto cuenta los flancos ascendentes de la señal "EN" y proporciona una salida de conteo "count".
  //En resumen, esta parte del código es responsable de la lógica de sincronización y de conteo en el módulo "Proyecto_2".
  always @(posedge clk or posedge reset) begin
    if (reset) begin
      btn_state <= 2'b11;
      sw_state <= 2'b11;
      en_state <= 2'b11;
      btn_sync <= 1'b0;
      sw_sync <= 1'b0;
      count <= 8'd0;
    end else begin
      btn_state <= {btn_state[0], btn};
      sw_state <= {sw_state[0], sw};
      en_state <= {en_state[0], EN};
      
      if (btn_state == 2'b01 || btn_state == 2'b10) begin
        btn_sync <= ~btn_sync;
      end
      
      if (sw_state == 2'b01 || sw_state == 2'b10) begin
        sw_sync <= ~sw_sync;
      end
      
      if (en_state == 2'b01) begin
        count <= count + 1;
      end
    end
  end
  
endmodule
